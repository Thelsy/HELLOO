# 列表是由一系列按指定顺序排列的元素组成，有序，有下标，使用[]表示，下标索引从0开始
name1 = [1, 2, 3, 4]
print(name1)
print("--------------------------------------------------------------------------------")
# python为访问列表中最后一个元素提供了一个特殊的语法，将索引可以设置为-1，以此类推当访问倒数第二个元素时便是-2
name2 = ["h", "l", "l", "t"]
print(name2[-1].title())
print("--------------------------------------------------------------------------------")
# 修改元素需要指定元素下标位置，上述方法也通用
name3 = [1, 2, 3, 4]
print(name3[1])
name3[1] = 6
print("--------------------------------------------------------------------------------")
print(name3[1])
print("--------------------------------------------------------------------------------")
# 新增元素 append()默认是在列表元素的最后一位新增元素，不会影响到已经存在的元素
name4 = [1, 2, 3, 4]
print(name4)
print("--------------------------------------------------------------------------------")
name4.append(9)
print(name4)
print("--------------------------------------------------------------------------------")
# 插入元素 insert()插入元素时，需要指定元素的下标及元素的值 insert(下标,插入的元素)
name5 = [1, 2, 3, 4]
print(name5)
print("--------------------------------------------------------------------------------")
name5.insert(1, 9)
print(name5)
print("--------------------------------------------------------------------------------")
# 删除元素 del()方法删除元素需要告知元素下标所在位置
name6 = [1, 2, 3, 4]
print(name6)
print("--------------------------------------------------------------------------------")
del name6[1]
print(name6)
print("--------------------------------------------------------------------------------")
# 删除元素 pop()方法默认删除列表元素的最后一位，可以指定下标进行删除，通过pop方法还可以获取到删除下标元素的值，以做展示
name7 = [1, 2, 3, 4]
print(name7)
print("--------------------------------------------------------------------------------")
at = name7.pop()
print(name7)
print(at)
print("--------------------------------------------------------------------------------")
# 删除元素 remove()方法可以根据值来删除元素，当不知道下标的情况下
name8 = [1, 2, 3, 4]
print(name8)
print("--------------------------------------------------------------------------------")
name8.remove(1)
print(name8)
print("--------------------------------------------------------------------------------")
# 列表排序 sort()对列表元素进行永久排序，当reverse参数=True时，元素将会反向排序，值得研究的是他的排序算法？
name9 = [1, 3, 2, 4]
name9.sort(reverse=False)
print(name9)
print("--------------------------------------------------------------------------------")
# 列表排序 sorted()对列表进行临时排序不影响原有元素的位置，当reverse参数=True时，元素将会反向排序，值得研究的是他的排序算法？
name10 = [4, 3, 1, 2]
print(sorted(name10, reverse=True))
print(name10)
print("--------------------------------------------------------------------------------")
# 列表元素反转 reverse()对列表元素进行永久反转，值得注意的是该方法并不会对元素进行排序，只是反转元素
name11 = [1, 2, 4, 3]
name11.reverse()
print(name11)
print("--------------------------------------------------------------------------------")
# 确定列表的长度使用 len(列表名)方法，值得注意的是python计算列表的长度时是从1开始而不是从0开始
print(len(name11))

